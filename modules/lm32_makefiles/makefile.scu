###############################################################################
##                                                                           ##
##  Common include makefile for SCU integrated soft core processor LM32      ##
##                                                                           ##
##---------------------------------------------------------------------------##
## File:    makefile.scu                                                     ##
## (c):     GSI Helmholtz Centre for Heavy Ion Research GmbH                 ##
## Author:  Ulrich Becker                                                    ##
## Date:    17.12.2018                                                       ##
###############################################################################
ifndef MIAN_MODULE
   $(error Variable MAIN_MODULE is not defined, it includes \
the source-filename which contains the function "main"! )
endif
ifndef SYN_DIR
   $(error Variable SYN_DIR is not defined, it includs the path \
to the folder .../syn/)
endif
VERSION       ?= "1.0.0"
PRINT_BUFSIZE ?= 128
USRCPUCLK     ?= 125000
RAM_SIZE      ?= 98304
TARGET        ?= $(notdir $(basename $(MIAN_MODULE)))
BUILD_ID_FILE ?= $(TARGET)_buildid.c
LINKER_SCRIPT ?= $(TARGET).ld

SCU_DIR = $(SYN_DIR)/top/gsi_scu

SCU_LIB_SRC_DIR = $(SYN_DIR)/modules/lm32-include
WR_DIR          = $(SYN_DIR)/ip_cores/wrpc-sw

GENERATED_DIR ?= $(dir $(MIAN_MODULE))generated

SOURCE += $(GENERATED_DIR)/$(BUILD_ID_FILE)

SOURCE += $(SYN_DIR)/modules/lm32_stub/stubs.c
SOURCE += $(SYN_DIR)/modules/lm32_stub/crt0.S
SOURCE += $(SCU_LIB_SRC_DIR)/mini_sdb.c
SOURCE += $(SCU_LIB_SRC_DIR)/mprintf.c
SOURCE += $(SCU_LIB_SRC_DIR)/sdb_add.S

SOURCE += $(WR_DIR)/dev/w1.c
SOURCE += $(WR_DIR)/dev/w1-hw.c
SOURCE += $(WR_DIR)/dev/uart.c
SOURCE += $(WR_DIR)/dev/devicelist.c
SOURCE += $(WR_DIR)/dev/syscon.c
SOURCE += $(WR_DIR)/lib/usleep.c
SOURCE += $(WR_DIR)/pp_printf/printf.c
SOURCE += $(WR_DIR)/pp_printf/vsprintf-mini.c
SOURCE += $(WR_DIR)/sdb-lib/glue.c

SOURCE += $(MIAN_MODULE)

INCLUDE_DIRS += $(dir $(MIAN_MODULE))
INCLUDE_DIRS += $(SCU_LIB_SRC_DIR)
INCLUDE_DIRS += $(SCU_DIR)
INCLUDE_DIRS += $(SYN_DIR)/tools
INCLUDE_DIRS += $(WR_DIR)/include
INCLUDE_DIRS += $(WR_DIR)/sdb-lib
INCLUDE_DIRS += $(WR_DIR)/pp_printf
INCLUDE_DIRS += $(SYN_DIR)/ip_cores/etherbone-core/hdl/eb_master_core

DEFINES += CONFIG_WR_NODE
DEFINES += CONFIG_PRINT_BUFSIZE=$(PRINT_BUFSIZE)
DEFINES += SDBFS_BIG_ENDIAN
DEFINES += USRCPUCLK=$(USRCPUCLK)

CODE_OPTIMIZATION ?= s

CFLAGS += -O$(CODE_OPTIMIZATION)
CFLAGS += -nostdlib
CFLAGS += -mmultiply-enabled
CFLAGS += -mbarrel-shift-enabled
CFLAGS += -fno-toplevel-reorder

# LIBS += gcc c

RAM_OFFS      = 0x10000000
BOOTL_SIZE    = 0x100
BUILDID_SIZE  = 0x400
BUILDID_START = $(shell printf "0x%x" $(BOOTL_SIZE))
SHARED_START  = $(shell printf "0x%x" $$(( $(BUILDID_START) + $(BUILDID_SIZE) )) )
INTADR_OFFS   = $(shell printf "0x%x" $(RAM_OFFS))


ifdef SHARED_SIZE
   SHARED = "$(SHARED_SIZE)"
else
   SHARED = "0"
   SHARED_SIZE = 0
endif

RESERVED_MEM_SIZE := $(shell echo $$(($(BOOTL_SIZE)+$(BUILDID_SIZE)+$(SHARED_SIZE))) )
USABLE_MEM_SIZE := $(shell echo $$(($(RAM_SIZE)*4-$(RESERVED_MEM_SIZE))) )

COMMENT_TEXT = 'This file has been created automatically, do not modify it by hand!'

LDS  = "/*!\n"
LDS += " * @file $(LINKER_SCRIPT)\n"
LDS += " * @brief Linkerscript for target: $(TARGET)\n"
LDS += " * @note $(COMMENT_TEXT)\n"
LDS += " * @author Created by makefile.scu\n"
LDS += " */\n\n"
LDS += "OUTPUT_FORMAT(\"elf32-lm32\")\n"
#LDS += "GROUP(-lgloss -lnosys -lc -lgcc)\n"
LDS += "GROUP( -lc -lgcc)\n"
#LDS += "ENTRY(_start)\n"
LDS += "\nMEMORY\n"
LDS += "{\n"
LDS += "   ram : ORIGIN = $(RAM_OFFS), LENGTH = $(RAM_SIZE)\n"
LDS += "} /* End of MEMORY */\n\n"
LDS += "SECTIONS\n"
LDS += "{\n"
LDS += "   . = ORIGIN(ram);\n\n"
LDS += "   /* First location in stack is highest address in RAM */\n"
LDS += "   PROVIDE(_fstack = ORIGIN(ram) + LENGTH(ram) - 4);\n"
LDS += "   .boot :\n"
LDS += "   {\n"
LDS += "      _fboot = .;\n"
LDS += "      *(.boot);\n"
LDS += "      _eboot = .;\n"
LDS += "   } > ram\n\n"
LDS += "   /* Begin of build-id array defined in \"$(GENERATED_DIR)/$(BUILD_ID_FILE)\" */\n"
LDS += "   .buildid ADDR(.boot) + $(BOOTL_SIZE) :\n"
LDS += "   {\n"
LDS += "      _fbuildid = .;\n"
LDS += "      *(.buildid .buildid.*) _ebuildid = .;\n"
LDS += "   } > ram\n\n"
LDS += "   /* Begin of shared memory */\n"
LDS += "   .shared ADDR(.buildid) + $(BUILDID_SIZE) :\n"
LDS += "   {\n"
LDS += "      _fshared = .;\n"
LDS += "      PROVIDE(_startshared = .);\n"
LDS += "      *(.shared .shared.*) _eshared = .;\n"
LDS += "   } > ram\n\n"
LDS += "   /* Begin of code */\n"
LDS += "   .text  ADDR(.shared) + $(SHARED) :\n"
LDS += "   {\n"
LDS += "     . = ALIGN(4);\n"
LDS += "     _ftext = .;\n"
LDS += "     _ftext_rom = LOADADDR(.text);\n"
LDS += "     *(.text .stub .text.* .gnu.linkonce.t.*)\n"
LDS += "     *(.gnu.warning)\n"
LDS += "     KEEP(*(.init))\n"
LDS += "     KEEP(*(.fini))\n"
LDS += "     /* Constructors and destructors */\n"
LDS += "     KEEP(*crtbegin*.o(.ctors))\n"
LDS += "     KEEP(*(EXCLUDE_FILE (*crtend*.o ) .ctors))\n"
LDS += "     KEEP(*(SORT(.ctors.*)))\n"
LDS += "     KEEP(*(.ctors))\n"
LDS += "     KEEP(*crtbegin*.o(.dtors))\n"
LDS += "     KEEP(*(EXCLUDE_FILE (*crtend*.o ) .dtors))\n"
LDS += "     KEEP(*(SORT(.dtors.*)))\n"
LDS += "     KEEP(*(.dtors))\n"
LDS += "     KEEP(*(.jcr))\n"
LDS += "     _etext = .;\n"
LDS += "   } > ram\n\n"
LDS += "   /* Exception handlers */\n"
LDS += "   .eh_frame_hdr :\n"
LDS += "   {\n"
LDS += "      *(.eh_frame_hdr)\n"
LDS += "   } > ram\n"
LDS += "   .eh_frame :\n"
LDS += "   {\n"
LDS += "      KEEP (*(.eh_frame))\n"
LDS += "   } > ram\n"
LDS += "   .gcc_except_table :\n"
LDS += "   {\n"
LDS += "      *(.gcc_except_table)\n"
LDS += "      *(.gcc_except_table.*)\n"
LDS += "   } > ram\n\n"
LDS += "   /* Read-only data */\n"
LDS += "   .rodata :\n"
LDS += "   {\n"
LDS += "     . = ALIGN(4);\n"
LDS += "     _frodata = .;\n"
LDS += "     _frodata_rom = LOADADDR(.rodata);\n"
LDS += "     *(.rodata .rodata.* .gnu.linkonce.r.*)\n"
LDS += "     *(.rodata1)\n"
LDS += "     _erodata = .;\n"
LDS += "   } > ram\n\n"
LDS += "   .data :\n"
LDS += "   {\n"
LDS += "      . = ALIGN(4);\n"
LDS += "      _fdata = .;\n"
LDS += "      _fdata_rom = LOADADDR(.data);\n"
LDS += "      *(.data .data.* .gnu.linkonce.d.*)\n"
LDS += "      *(.data1)\n"
LDS += "      SORT(CONSTRUCTORS)\n"
LDS += "      _gp = ALIGN(16) + 0x7ff0;\n"
LDS += "      *(.sdata .sdata.* .gnu.linkonce.s.*)\n"
LDS += "      _edata = .;\n"
LDS += "   } > ram\n\n"
LDS += "   .bss :\n"
LDS += "   {\n"
LDS += "     . = ALIGN(4);\n"
LDS += "     _fbss = .;\n"
LDS += "     *(.dynsbss)\n"
LDS += "     *(.sbss .sbss.* .gnu.linkonce.sb.*)\n"
LDS += "     *(.scommon)\n"
LDS += "     *(.dynbss)\n"
LDS += "     *(.bss .bss.* .gnu.linkonce.b.*)\n"
LDS += "     *(COMMON)\n"
LDS += "     . = ALIGN(4);\n"
LDS += "     _ebss = .;\n"
LDS += "     _end = .;\n"
LDS += "     PROVIDE(end = .);\n"
LDS += "   } > ram = 0\n"
LDS += "} /* End of SECTIONS */\n"

CBR_DATE := $$(date +"%a %b %d %H:%M:%S %Z %Y")
CBR_USR  := $$(git config user.name)
CBR_MAIL := $$(git config user.email)
CBR_HOST := $$(hostname)
CBR_GCC  = $$($(CC) --version | grep gcc)
CBR_FLGS = $(CFLAGS)
CBR_KRNL := $$(uname -mrs)
CBR_OS   := $$(lsb_release -d -s | tr -d '"')
CBR_PF   := ""
CBR_GIT1 := $$(git log HEAD~0 --oneline --decorate=no -n 1 | cut -c1-100)
CBR_GIT2 := $$(git log HEAD~1 --oneline --decorate=no -n 1 | cut -c1-100)
CBR_GIT3 := $$(git log HEAD~2 --oneline --decorate=no -n 1 | cut -c1-100)
CBR_GIT4 := $$(git log HEAD~3 --oneline --decorate=no -n 1 | cut -c1-100)
CBR_GIT5 := $$(git log HEAD~4 --oneline --decorate=no -n 1 | cut -c1-100)

CBR  = "//! @file $(BUILD_ID_FILE)\n"
CBR += "//! @note $(COMMENT_TEXT)\n"
CBR += "//! @author Created by makefile.scu\n\n"
CBR += "\#define BUILDID __attribute__((section(\".buildid\")))\n\n"
CBR += "const char BUILDID build_id_rom[] = \""'\\'"\n"
CBR += "UserLM32"'\\n\\'"\n"
CBR += "Project     : $(TARGET)"'\\n\\'"\n"
CBR += "Version     : $(VERSION)"'\\n\\'"\n"
CBR += "Platform    : $(CBR_PF)"'\\n\\'"\n"
CBR += "Build Date  : $(CBR_DATE)"'\\n\\'"\n"
CBR += "Prepared by : $(USER) $(CBR_USR) <$(CBR_MAIL)>"'\\n\\'"\n"
CBR += "Prepared on : $(CBR_HOST)"'\\n\\'"\n"
CBR += "OS Version  : $(CBR_OS) $(CBR_KRNL)"'\\n\\'"\n"
CBR += "GCC Version : $(CBR_GCC)"'\\n\\'"\n"
CBR += "IntAdrOffs  : $(INTADR_OFFS)"'\\n\\'"\n"
CBR += "SharedOffs  : $(SHARED_START)"'\\n\\'"\n"
CBR += "SharedSize  : $(SHARED_SIZE)"'\\n\\'"\n"
CBR += "FW-ID ROM will contain:"'\\n\\'"\n"
CBR += "   $(CBR_GIT1)"'\\n\\'"\n"
CBR += "   $(CBR_GIT2)"'\\n\\'"\n"
CBR += "   $(CBR_GIT3)"'\\n\\'"\n"
CBR += "   $(CBR_GIT4)"'\\n\\'"\n"
CBR += "   $(CBR_GIT5)"'\\n\\'"\n\";\n\n"

SHARED_MAP_HEADDER ?= shared_mmap.h

UCTARGET = "_$$(echo $(SHARED_MAP_HEADDER) | tr a-z A-Z | tr '.' '_')"
SMM  = "//! @file $(GENERATED_DIR)/$(SHARED_MAP_HEADDER)\n"
SMM += "//! @brief Location of Buildid and Shared Section in LM32 Memory,"
SMM += " to be used by host\n"
SMM += "//! @note $(COMMENT_TEXT)\n"
SMM += "//! @author Created by makefile.scu\n\n"
SMM += "\#ifndef $(UCTARGET)\n"
SMM += "\#define $(UCTARGET)\n\n"
SMM += "\#define INT_BASE_ADR  $(RAM_OFFS)\n"
SMM += "\#define RAM_SIZE      $(RAM_SIZE)\n"
SMM += "\#define SHARED_SIZE   $(SHARED_SIZE)\n"
SMM += "\#define BUILDID_OFFS  $(BUILDID_START)\n"
SMM += "\#define SHARED_OFFS   $(SHARED_START)\n\n"
SMM += "\#endif\n"

#ADDITIONAL_DEPENDENCES += Makefile
ADDITIONAL_DEPENDENCES += $(GENERATED_DIR)/$(SHARED_MAP_HEADDER)
ADDITIONAL_TO_CLEAN    += $(GENERATED_DIR)/$(SHARED_MAP_HEADDER)
ADDITIONAL_TO_CLEAN    += $(GENERATED_DIR)/$(BUILD_ID_FILE)

ADDITIONAL_LD_DEPENDENCES = $(WORK_DIR)/$(LINKER_SCRIPT)

RESULT_FILE = $(TARGET_DIR)/$(TARGET).mif

ADDITIONAL_TO_CLEAN += $(RESULT_FILE)
ADDITIONAL_TO_CLEAN += $(WORK_DIR)/$(LINKER_SCRIPT)

MAKEFILE_DIR ?= $(SYN_DIR)/modules/lm32_makefiles

LD_FLAGS ?= -nostdlib -T$(WORK_DIR)/$(LINKER_SCRIPT) $(ARG_LIBS)

GENRAMMIF ?= $(WR_DIR)/tools/genrammif
EB_LOAD   ?= $(SYN_DIR)/tools/eb-fwload

ifeq ($(V), 1)
   GENRAMMIF_F = $(GENRAMMIF)
   EB_LOAD_F   = $(EB_LOAD)
else
   GENRAMMIF_F = $(FORMAT_R) $(CPU) "MIF" $(@); $(GENRAMMIF)
   EB_LOAD_F   = $(FORMAT_R) $(CPU) "EBL" "$(TARGET) -> $(URL) $(CPU_ID) $(CPU_OFFSET)"; $(EB_LOAD)
endif

# ------------ Additional defines for Doxygen ---------------------------------
DOX_INPUT                 += $(SCU_LIB_SRC_DIR)/helper_macros.h
DOX_INPUT                 += $(SCU_LIB_SRC_DIR)/eb_console_helper.h
DOX_INPUT                 += $(SCU_LIB_SRC_DIR)/lm32_assert.h
DOX_INPUT                 += $(SHARED_MAP_HEADDER)
DOX_INPUT                 += $(WORK_DIR)/$(LINKER_SCRIPT)
DOX_OUTPUT_DIRECTORY      ?= $(HOME)/Documents/scr_doc/$(TARGET)
DOX_PROJECT_LOGO          ?= $(MAKEFILE_DIR)/GSI_Logo_rgb_72dpi.png
# -------------- End of defines for Doxygen -----------------------------------

include $(MAKEFILE_DIR)/makefile.lm32

$(GENERATED_DIR):
	$(QUIET)mkdir $(GENERATED_DIR)

$(GENERATED_DIR)/$(SHARED_MAP_HEADDER): $(GENERATED_DIR)
	$(QUIET)(printf %b $(SMM)) > $@

$(GENERATED_DIR)/$(BUILD_ID_FILE): $(GENERATED_DIR)
	$(QUIET)(printf %b $(CBR)) > $@

$(WORK_DIR)/$(LINKER_SCRIPT): # $(WORK_DIR)
	$(QUIET)(printf %b $(LDS)) > $@

$(RESULT_FILE): $(BIN_FILE)
	$(GENRAMMIF_F) $(BIN_FILE) $(RAM_SIZE) > $(RESULT_FILE)


#-------------------------- upload to target SCU ------------------------------
# For developing reasons only.
ifdef TARGET_URL_FILE

URL        = $(shell cat $(TARGET_URL_FILE))
CPU_ID     ?= u0
CPU_OFFSET ?= 0

.PHONY: load
load: $(BIN_FILE)
	$(EB_LOAD_F) $(URL) $(CPU_ID) $(CPU_OFFSET) $^
endif

#=================================== EOF ======================================