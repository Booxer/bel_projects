--! @file        oled_auto.vhd
--  DesignUnit   oled_auto
--! @author      M. Kreider <m.kreider@gsi.de>
--! @date        22/12/2016
--! @version     0.2.0
--! @copyright   2016 GSI Helmholtz Centre for Heavy Ion Research GmbH
--!

--! @brief AUTOGENERATED WISHBONE-SLAVE CORE FOR oled.vhd
--!
--------------------------------------------------------------------------------
--! This library is free software; you can redistribute it and/or
--! modify it under the terms of the GNU Lesser General Public
--! License as published by the Free Software Foundation; either
--! version 3 of the License, or (at your option) any later version.
--!
--! This library is distributed in the hope that it will be useful,
--! but WITHOUT ANY WARRANTY; without even the implied warranty of
--! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
--! Lesser General Public License for more details.
--!
--! You should have received a copy of the GNU Lesser General Public
--! License along with this library. If not, see <http://www.gnu.org/licenses/>.
--------------------------------------------------------------------------------

-- ***********************************************************
-- ** WARNING - THIS IS AUTO-GENERATED CODE! DO NOT MODIFY! **
-- ***********************************************************
--
-- If you want to change the interface,
-- modify oled.xml and re-run 'python wbgenplus.py oled.xml' !

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use work.wishbone_pkg.all;
use work.wbgenplus_pkg.all;
use work.genram_pkg.all;
use work.oled_auto_pkg.all;

entity oled_auto is
Port(
  clk_sys_i   : std_logic;                            -- Clock input for sys domain
  rst_sys_n_i : std_logic;                            -- Reset input (active low) for sys domain
  error_i     : in  std_logic_vector(1-1 downto 0);   -- Error control
  stall_i     : in  std_logic_vector(1-1 downto 0);   -- flow control
  char_o      : out std_logic_vector(19-1 downto 0);  -- Char input FIFO. Row b18..16, Col b11..8, Ascii b7..0
  char_WR_o   : out std_logic_vector(1-1 downto 0);   -- Write enable flag - char
  col_offs_o  : out std_logic_vector(8-1 downto 0);   -- first visible pixel column. 0x23 for old, 0x30 for new controllers
  raw_o       : out std_logic_vector(19-1 downto 0);  -- Raw  input FIFO. Disp RAM Adr b18..8, Pixel (Col) b7..0
  raw_WR_o    : out std_logic_vector(1-1 downto 0);   -- Write enable flag - raw
  reset_o     : out std_logic_vector(1-1 downto 0);   -- Resets the OLED display
  uart_o      : out std_logic_vector(8-1 downto 0);   -- UART input FIFO. Ascii on b7..0
  uart_WR_o   : out std_logic_vector(1-1 downto 0);   -- Write enable flag - uart
  
  slave_i     : in  t_wishbone_slave_in;
  slave_o     : out t_wishbone_slave_out

  
);
end oled_auto;

architecture rtl of oled_auto is

  signal s_pop, s_push    : std_logic;
  signal s_empty, s_full  : std_logic;
  signal r_e_wait, s_e_p  : std_logic;
  signal s_stall          : std_logic;
  signal s_valid,
         s_valid_ok,
         r_valid_check    : std_logic;
  signal r_ack            : std_logic;
  signal r_err            : std_logic;
  signal s_e, r_e, s_w    : std_logic;
  signal s_d              : std_logic_vector(32-1 downto 0);
  signal s_s              : std_logic_vector(4-1 downto 0);
  signal s_a              : std_logic_vector(3-1 downto 0);
  signal s_a_ext,
         r_a_ext0,
         r_a_ext1         : std_logic_vector(5-1 downto 0);
  signal r_error          : std_logic_vector(1-1 downto 0)  := std_logic_vector(to_unsigned(0, 1)); -- Error
  signal s_error_i        : std_logic_vector(1-1 downto 0)  := (others => '0');                     -- Error control
  signal s_stall_i        : std_logic_vector(1-1 downto 0)  := (others => '0');                     -- flow control
  signal r_reset          : std_logic_vector(1-1 downto 0)  := (others => '0');                     -- Resets the OLED display
  signal r_col_offs       : std_logic_vector(8-1 downto 0)  := (others => '0');                     -- first visible pixel column. 0x23 for old, 0x30 for new controllers
  signal r_uart_WR        : std_logic_vector(1-1 downto 0)  := std_logic_vector(to_unsigned(0, 1)); -- Write enable flag - uart
  signal r_uart           : std_logic_vector(8-1 downto 0)  := (others => '0');                     -- UART input FIFO. Ascii on b7..0
  signal r_char_WR        : std_logic_vector(1-1 downto 0)  := std_logic_vector(to_unsigned(0, 1)); -- Write enable flag - char
  signal r_char           : std_logic_vector(19-1 downto 0) := (others => '0');                     -- Char input FIFO. Row b18..16, Col b11..8, Ascii b7..0
  signal r_raw_WR         : std_logic_vector(1-1 downto 0)  := std_logic_vector(to_unsigned(0, 1)); -- Write enable flag - raw
  signal r_raw            : std_logic_vector(19-1 downto 0) := (others => '0');                     -- Raw  input FIFO. Disp RAM Adr b18..8, Pixel (Col) b7..0


begin

  sp : wb_skidpad
  generic map(
    g_adrbits   => 3
  )
  Port map(
    clk_i        => clk_sys_i,
    rst_n_i      => rst_sys_n_i,
    push_i       => s_push,
    pop_i        => s_pop,
    full_o       => s_full,
    empty_o      => s_empty,
    adr_i        => slave_i.adr(4 downto 2),
    dat_i        => slave_i.dat,
    sel_i        => slave_i.sel,
    we_i         => slave_i.we,
    adr_o        => s_a,
    dat_o        => s_d,
    sel_o        => s_s,
    we_o         => s_w
  );

  validmux: with to_integer(unsigned(s_a_ext)) select
  s_valid <= 
  '1' when others;
  
  s_valid_ok        <=  r_valid_check and s_valid;
  s_e_p             <=  r_e or r_e_wait;
  s_a_ext           <= s_a & "00";
  s_stall           <= s_full;
  s_push            <= slave_i.cyc and slave_i.stb and not s_stall;
  s_e               <= not (s_empty or s_e_p);
  s_pop             <= s_valid_ok;
  slave_o.stall     <= s_stall;
  
  s_error_i   <= error_i;
  s_stall_i   <= stall_i;
  reset_o     <= r_reset;
  col_offs_o  <= r_col_offs;
  uart_WR_o   <= r_uart_WR;
  uart_o      <= r_uart;
  char_WR_o   <= r_char_WR;
  char_o      <= r_char;
  raw_WR_o    <= r_raw_WR;
  raw_o       <= r_raw;
  
  slave : process(clk_sys_i)
  begin
    if rising_edge(clk_sys_i) then
      if(rst_sys_n_i = '0') then
        r_e           <= '0';
        r_e_wait      <= '0';
        r_valid_check <= '0';
        r_error     <= std_logic_vector(to_unsigned(0, 1));
        r_reset     <= (others => '0');
        r_col_offs  <= (others => '0');
        r_uart_WR   <= std_logic_vector(to_unsigned(0, 1));
        r_uart      <= (others => '0');
        r_char_WR   <= std_logic_vector(to_unsigned(0, 1));
        r_char      <= (others => '0');
        r_raw_WR    <= std_logic_vector(to_unsigned(0, 1));
        r_raw       <= (others => '0');
      else
        r_e           <= s_e;
        r_a_ext0      <= s_a_ext;
        r_a_ext1      <= r_a_ext0;
        r_e_wait      <= s_e_p and not s_valid_ok;
        r_valid_check <= (r_valid_check or (s_e_p and not stall_i(0))) and not s_valid_ok;
        r_ack         <= s_pop and not (error_i(0) or r_error(0));
        r_err         <= s_pop and     (error_i(0) or r_error(0));
        slave_o.ack   <= r_ack;
        slave_o.err   <= r_err;
        
        
        if stall_i = "0" then
          r_char_WR <= (others => '0');
          r_error   <= (others => '0');
          r_raw_WR  <= (others => '0');
          r_reset   <= (others => '0');
          r_uart_WR <= (others => '0');
        end if;
        
        
        
        if(s_e = '1') then
          if(s_w = '1') then
            -- WISHBONE WRITE ACTIONS
            case to_integer(unsigned(s_a_ext)) is
              when c_reset_OWR      => r_reset    <= f_wb_wr(r_reset, s_d, s_s, "owr");     -- 
              when c_col_offs_RW    => r_col_offs <= f_wb_wr(r_col_offs, s_d, s_s, "owr");  -- 
              when c_uart_OWR       => r_uart     <= f_wb_wr(r_uart, s_d, s_s, "owr");      -- 
              r_uart_WR                           <= (others  => '1');
              when c_char_OWR       => r_char     <= f_wb_wr(r_char, s_d, s_s, "owr");      -- 
              r_char_WR                           <= (others  => '1');
              when c_raw_OWR        => r_raw      <= f_wb_wr(r_raw, s_d, s_s, "owr");       -- 
              r_raw_WR                            <= (others   => '1');
              when others           => r_error    <= "1";
            end case;
          else
            -- WISHBONE READ ACTIONS
            case to_integer(unsigned(s_a_ext)) is
              when c_col_offs_RW  => null;
              when others         => r_error <= "1";
            end case;
          end if; -- s_w
        end if; -- s_e
        
        case to_integer(unsigned(r_a_ext1)) is
          when c_col_offs_RW  => slave_o.dat  <= std_logic_vector(resize(unsigned(r_col_offs), slave_o.dat'length));  -- 
          when others         => slave_o.dat  <= (others => 'X');
        end case;

        
      end if; -- rst
    end if; -- clk edge
  end process;

end rtl;
